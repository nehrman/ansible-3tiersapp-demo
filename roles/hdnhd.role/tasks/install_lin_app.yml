- name: create temporary directory to get app
  tempfile:
    state: directory
    suffix: app
  register: r_tempfile
  delegate_to: localhost
  run_once: yes
  become: no

- name: git clone the app specific version
  git:
    repo: "{{ app }}"
    version: "{{ version }}"
    dest: "{{ r_tempfile.path }}"
  delegate_to: localhost
  run_once: yes
  become: no
  when:
    - version is defined and version != ""

- name: git clone the app latest comit
  git:
    repo: "{{ app }}"
    dest: "{{ r_tempfile.path }}"
  delegate_to: localhost
  run_once: yes
  become: no
  when:
    - version is not defined or version == ""

- name: Remove git history
  file:
    path: "{{ r_tempfile.path }}/.git"
    state: absent
  delegate_to: localhost
  run_once: yes
  become: no

- name: copy model from s3
  get_url:
    url: "{{ bucket }}/model-{{ version }}.model"
    dest: "{{ r_tempfile.path }}/app/model/model.model"
    force: yes
  delegate_to: localhost
  run_once: yes
  become: no

- name: create app directory
  file:
    path: /app
    state: directory
    mode: 0755
  # become: yes

- name: copy app to nodes
  copy:
    src: "{{ r_tempfile.path }}/"
    dest: /app/
  delegate_to: localhost
  become: yes

- name: pip install requirements
  pip:
    requirements: /app/requirements.txt
    extra_args: --no-cache-dir
  become: yes

- name: customize gunicorn config for S3
  blockinfile:
    path: /app/app/cfg.py
    marker: "# -- ANSIBLE MANAGED BLOCK -- #"
    content: |
      raw_env =  [
      'S3_BUCKET_NAME={{ results_bucket }}',
      'S3_KEY={{ AWS_KEY }}',
      'S3_SECRET={{ AWS_SECRET }}',
      'OBJECT_STORE={{ object_store }}'
      ]
  when: object_store == 's3'

- name: customize gunicorn config for Azure blob
  blockinfile:
    path: /app/app/cfg.py
    marker: "# -- ANSIBLE MANAGED BLOCK -- #"
    content: |
      raw_env =  [
      'BLOB_ACCOUNT={{ blob_account }}',
      'BLOB_KEY={{ blob_key }}',
      'BLOB_CONTAINER={{ blob_container }}',
      'OBJECT_STORE={{ object_store }}'
      ]
  when: object_store == 'blob'

- name: customize gunicorn config for local access
  blockinfile:
    path: /app/app/cfg.py
    marker: "# -- ANSIBLE MANAGED BLOCK -- #"
    content: |
      raw_env =  [
      'OBJECT_STORE={{ object_store }}'
      ]
  when: object_store == 'local'

- name: start gunicorn
  command: gunicorn -c cfg.py app:app
  args:
    chdir: /app/app
  async: 1
  poll: 0

- name: Remove temp files
  file:
    path: "{{ r_tempfile.path }}"
    state: absent
  delegate_to: localhost
  run_once: yes
  become: no
